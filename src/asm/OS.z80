;OS for boot ROM with bootcode and romcalls
;Copyright (C) 2023-2024  Tristan van de Weg & Marijn Vollenberg
;
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License along
;    with this program; if not, write to the Free Software Foundation, Inc.,
;    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#define OSfile
#include "inc/z80.inc"

;--------------------------------
;Boot Code
;--------------------------------
Boot:
	ld hl,_StackTop			;Set stack pointer to correct place in RAM
	ld sp,hl				;

	;Start display

	ld a,%10001001			;Set IO1 ports A and B to mode 0 output, set IO1 port C to mode 0 input
	out ($03),a				;
	;TODO Enable and clear display
	call _DisplayOn
	;Attempt to start a program from external memory

	ld a,(_ExtMem)			;Check for program start byte
	cp a,_ExtPrgmInd		;
	jp z,_ExtMem+1			;Jump to program if there is one

	ld hl,strBootError		;Print Error message if there is no program
	call _PrintS			;
Stop:
	ld a,0
StopLoop:
	nop
	inc a
	cp a,$ff
	jr z,Boot
	jr StopLoop

_Exit:
	ld hl,strProgramExit
	call _PrintS
	jp Boot

strProgramExit:
	.db "Program finished, rebooting",0

strBootError:
	.db "No valid program found",0

;--------------------------------
;ROM Calls
;--------------------------------

;--------------------------------
;Printing

_PrintS:						;Address of string to print in hl, string must end in 0
	ld a,(hl)
	cp a,0
	ret z						;If a = 0, return
	call _PrintB
	inc hl
	jr _PrintS

_PrintB:						;Byte to print in a
	sla a						;Double a register
	ld hl, _FontStart			;Set HL to the start address of the character table
	ld c, a						;Put A in BC
	ld b, 0						;
	add hl, bc					;Add BC to HL, result is the address of the character in HL
	jp _DrawSprite

;--------------------------------

	;ld d,(_CursorX)				;Load cursor position to DE
	;ld e,(_CursorY)				;

								;Second bit of D is CS1 or CS2
								;Next 3 bits of D is page address
								;Last 3 bits of D is the bit position

; _WriteVRAM						;Write VRAM to display
; 	ld b, 0						;Start at 0,0
; 	ld c, 0
; 	ld a, 0						;Register for display control pins


_SetDisplayPosition:			;b = x address, c = y address 
	ld a, %00100100				;Set fixed pins
	bit 6, b					;Test the display half if Z=1 it's the left half
	jr z, _SetDisplayPositionLeft						
	set 6, a					;Set the pin for the correct display half
	jr _SetDisplayPositionRight						;
_SetDisplayPositionLeft:
	set 7, a					;
_SetDisplayPositionRight:

;X value
	srl b						;Shift b register three to the right
	srl b
	srl b
	set 3, b					;Set command value to bit 3-7 of register b
	set 4, b
	set 5, b
	res 6, b
	set 7, b

;Y value
	res 7, c
	set 6, c

;--------------------------------
;VRAM Operations

_ClearDisp:							;Clear VRAM, registers affected: a, hl, bc, de
	xor a							;Faster than ld a, 0 and resets C
	ld bc, _VRAM
	ld hl, _VRAMSize
	ld de, 1
_ClearDispLoop:
	ld (bc), a
	inc bc
	sbc hl,de
	jr nz, _ClearDispLoop			;Loop until hl is 0
	ret

_DrawSprite:						;Print a 4x4 sprite to VRAM, hl = sprite address
	ld b, (hl)						;load top half of character in b
	inc hl							;increment hl
	ld c, (hl)						;load bottom half of chracter in c

	ld a, (_CursorX)				;load x position into a
	srl a							;shift a to the right
	srl a			
	srl a	
	ld hl, _VRAM					;load _VRAM into hl
	;add hl, a						;add x offset onto vram start position

	ld a, (_CursorY)				;load y position into a
	sla a							;multiply by 16
	sla a
	sla a
	sla a
	ld c,a							;Put a in bc
	ld b,0							;Most significant byte of bc is 0
	add hl, bc						;add y offset to hl

	ld a, b							;load first 
	ld d, %11110000
	and d
	ld b, (hl)
	or b

;--------------------------------

;--------------------------------
;Display On/Off

_DisplayOn:							;Turn the display on
	ld a, %00111111					;Display On command
	jr _DisplayOnOff
	
_DisplayOff:						;Turn the display off
	ld a, %00111110					;Display Off command
	jr _DisplayOnOff

_DisplayOnOff:						;Use DisplayOn/DisplayOff instead
	out (_Display), a
	ld a, %11100100					;Control signals
	out (_DisplayCmd), a
	nop
	nop
	nop
	ld a, %00100000					;Reset control signals
	out (_DisplayCmd), a
	ret

;--------------------------------

#include "inc/characters.inc"