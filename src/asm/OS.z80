;OS for boot ROM with bootcode and romcalls
;Copyright (C) 2023-2024  Tristan van de Weg & Marijn Vollenberg
;
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License along
;    with this program; if not, write to the Free Software Foundation, Inc.,
;    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

#define OSfile					;Some things in the include file don't need to be defined
#include "inc/z80.inc"			;Useful values
;TODO: change all subroutine names to exclude the _
;--------------------------------
;Boot Code
;--------------------------------
Boot:
	;Set stack pointer to RAM
	ld		hl, _StackTop		;Set stack pointer to correct place in RAM
	ld		sp, hl				;

	;Set interrupt mode
	di							;Disable interrupts for now
	
	;Set I/O
	ld		a,_ModeSetFlag|_PortAOutput|_PortBOutput|_PortClOutput|_PortCuOutput|_PortCuAMode0|_PortClBMode0	;Set IO1 ports A, B and C to mode 0 output
	out		(_IO1Cmd),a																							;
	ld		a,_ModeSetFlag|_PortAInput|_PortBInput|_PortClOutput|_PortCuOutput|_PortCuAMode0|_PortClBMode0		;Set IO2 ports A and B to mode 0 input, set port C to mode 0 output
	out		(_IO2Cmd),a																							;

	;Start display
	call	_DisplayInit
	call	DisplayOn	
	call	_ClearVRAM
	call	_WriteVRAM

	;ld		hl, _imgLogo		;Set the font to the Z80 logo
	;ld		(_CurFont), hl		;
	;ld		a, $21				;Print the logo
	;call	PrintB				;

	ld		hl, _fontLarge		;Set the font
	ld		(_CurFont), hl		;

	;Attempt to start a program from external memory TODO: detect conflicting memory and store what type of memory is installed
	;call	DetectCards

	;ld		a, (_ExtSlot1)		;Start a program from slot 1 if it's available
	;cp		_ExtIndPrgm			;
	;jp		z, _ExtMem			;
	;cp		_ExtIndPrg2			;
	;jp		z, _ExtMem2			;

	;ld		a, (_ExtSlot2)		;Start a program from slot 2 if it's available
	;cp		_ExtIndPrgm			;
	;jp		z, _ExtMem			;
	;cp		_ExtIndPrg2			;
	;jp		z, _ExtMem2			;

	;in		a, (_ExtIO1)		;Check for program start byte in slot 1
	;cp		a, _ExtIndPrgm		;
	;jp		z, _ExtMem			;Jump to program if there is one

	;in		a, (_ExtIO4)		;Check for program start byte in slot 2
	;cp		a, _ExtIndPrgm		;
	;jp		z, _ExtMem			;Jump to program if there is one

	;Print error message
	ld		hl, strBootError	;Print Error message if there is no program
	call	_PrintS				;

	halt						;Halt the CPU if no program is found

Exit:							;Print program finished message and halt when a program has finished
	.echo "Exit	",Exit;Address of the subroutine

	call	_ClearVRAM
	ld		hl,strProgramExit
	call	_PrintS
	halt

DetectCards:					;Detect what is installed in the memory slots
	.echo "DetectCards	",DetectCards;Address of the subroutine

	in		a, (_ExtIO1)		;Check and store what is installed in slot 1
	ld		(_ExtSlot1), a		;
	in		a, (_ExtIO2)		;Check the amount of banks in slot 1
	ld		(_ExtSlot1S), a		;

	in		a, (_ExtIO4)		;Check and store what is installed in slot 2
	ld		(_ExtSlot2), a		;
	in		a, (_ExtIO5)		;Check the amount of banks in slot 2
	ld		(_ExtSlot2S), a		;

	ret

strProgramExit:					;Program finished
	.db	"Program finished",0

strBootError:					;No program found
	;.db	"No program found",0
	.db "HELLO WORLD",0 ;TODO: remove

strMemError:					;Invalid memory setup
	.db "Invalid memory setup",0

;--------------------------------
;ROM Calls
;--------------------------------
.echo "Subroutine addresses:"

;Input: None
;
;Output: None
;
;Handles interrupts
;
;timing
;HandleInt:
;	.echo "Interrupt address:",HandleInt
;	in		a,(_IO2A)			;Get input
;	call PrintB					;Print in ASCII
;	call _WriteVRAM				;

;	reti



;--------------------------------
;Printing
__Printing:
;--------------------------------

;Input: HL
;
;Output: None
;
;Prints the 0-terminated string at HL to VRAM
_PrintS:
	.echo "PrintS	",_PrintS;Address of the subroutine
	;hl	= String address counter
	;a	= Byte to print

	ld		a,(hl)

	cp		a,0					;Check for end byte
	jp		z, _WriteVRAM		;If a = 0, write vram and then return

	call	PrintB				;Print the byte

	inc		hl					;Go to the next byte
	jr		_PrintS


;Input: A
;
;Output: None
;
;Prints the ASCII byte in A to VRAM using the current font
;
;Max: , Min: 286cc TODO: Calculate proper max ET
PrintB:
	.echo "PrintB	",PrintB;Address of the subroutine
	;hl	= Character sprite address
	;a	= ASCII byte / sprite address offset
	;bc	= Sprite address offset / sprite data
	;d	= Width
	;e	= Height

	;Affected registers: af, bc, de, hl
	push	af
	push	bc
	push	de
	push	hl

	push	af
	ld		hl, (_CurFont)		;Set HL to the current font address
	ld		a, (hl)				;The first byte of the font is the font size (bit 0-3=height, bit 4-7=width)
	ld		e, %11110000		;Get the sprite width
	and		e					;
	rrca \ rrca \ rrca \ rrca	;Shift the width into place

	ld		d, a				;Sprite width in d TODO: maybe increment d and e
	ld		a, (hl)
	ld		e, %00001111
	and		e
	ld		e, a				;Sprite height in e

	ld		a, (_CursorX)		;Copy CursorX to CursorXb
	ld		(_CursorXb), a		;
	ld		a, (_CursorY)		;Copy CursorY to CursorYb
	ld		(_CursorYb), a		;
	pop		af

	sub		$20					;Removes all of the unprintable characters from a since printable ASCII characters start at $21
	jr		nz, _PrintBChar		;Don't print a space

	call	MoveToNextChar
	jr		_PrintBExit			;Return after printing space

_PrintBChar:					;Don't call
	
	dec		a					;Offset the table by 1

								;Add a*2 to hl to get the correct location in the jump table
	sla		a					;Double a register
	ld		c, a				;Put A in BC
	ld		b, 0				;
	add		hl, bc				;Add BC to HL, result is the address in the jump table in HL

	ld		b, (hl)				;Load the jump address into bc with the correct endianness TODO: confirm endianness
	inc		hl					;
	ld		c, (hl)				;
	
	push	bc					;Transfer bc to hl
	pop		hl					;

_PrintBLoop:					;Don't call

	call	_DrawSprite			;Draw the sprite
	inc		hl					;Go to the next sprite
	inc		hl					;
	dec		d					;Go to the next horizontal sprite
	jr		z, _PrintBNextLine	;Go to the next line if necessary

	push	hl					;Go to the next horizontal position
	ld		hl, _CursorX		;
	inc		(hl)				;
	pop		hl					;

	jr		_PrintBLoop

_PrintBNextLine:				;Don't call
	push	hl

	ld		hl, (_CurFont)		;Set HL to the current font address
	ld		a, (hl)				;The first byte of the font is the font size (bit 0-3=height, bit 4-7=width)
	ld		d, %11110000		;Get the sprite width
	and		d					;
	rrca \ rrca \ rrca \ rrca	;Shift the width into place (rotating is faster)
	ld		d, a				;Sprite width in d

	ld		hl, _CursorY		;Go to the next vertical line
	inc		(hl)				;

	ld		a, (_CursorXb)		;Reset the x of the cursor to the original position
	ld		(_CursorX), a

	dec		e					;Go to the next vertical sprite
	pop		hl
	jr		nz, _PrintBLoop		;If the last line is reached return

	ld		a, (_CursorYb)		;Reset y of the cursor to the original position
	ld		(_CursorY), a

	call	MoveToNextChar		;Increment the cursor position

_PrintBExit:					;Don't call
	pop		hl
	pop		de
	pop		bc
	pop		af
	ret


;Input: None
;
;Output: None
;
;Moves the cursor to the next position with the current font size
;
;Max: 223cc, Min: 186cc
MoveToNextChar:
	.echo "MoveToNextChar	",MoveToNextChar;Address of the subroutine
	;Affected registers: af, bc, hl
	push	af
	push	bc
	push	hl

	;Load character width
	ld		hl, (_CurFont)
	ld		a, (hl)

	rrca \ rrca \ rrca \ rrca	;Rotating is faster and compacter, since the other half of the register is masked
	ld		c, %00001111		;Mask is reused later to save space
	and		c
	ld		b, a

	;Add the character width onto the cursor position
	ld		a, (_CursorX)
	add		a, b
	cp		16
	jp		p, _MoveToNextCharLine	;If the cursor exceeds the line width, move to the next line
	ld		(_CursorX), a
	jr		_MoveToNextCharExit

_MoveToNextCharLine:			;Don't call
	xor		a					;Set X cursor to 0
	ld		(_CursorX), a		;

	ld		a, (hl)				;Load character size values
	and		c					;Mask character height using the same mask as before
	ld		b, a

	ld		a, (_CursorY)		;Add character height to cursor
	add		a, b				;
	ld		(_CursorY), a		;
	
_MoveToNextCharExit:			;Don't call
	pop		hl
	pop		bc
	pop		af
	ret



;--------------------------------
;VRAM Operations
__VRAMOperations:
;--------------------------------

;Input: None
;
;Output: None
;
;Clears VRAM
_ClearVRAM:
	.echo "ClearVRAM	",_ClearVRAM;Address of the subroutine
	;bc	= Address counter
	;hl	= Size counter
	;a	= 0
	;de	= 1

	;Affected registers af, bc, de, hl
	push af
	push bc
	push de
	push hl

	scf
	ccf
	ld bc, _VRAM
	ld hl, _VRAMSize
	ld de, 1						;Used for decreasing hl
	xor a							;Faster than ld a, 0 and resets C flag
_ClearVRAMLoop:						;Don't call
	ld (bc), a						;Put 0 in the current address
	inc bc							;Go to the next address
	sbc hl,de						;Decrease hl
	jr nz, _ClearVRAMLoop			;Loop until hl is 0

	pop hl
	pop de
	pop bc
	pop af
	ret


;Input: None
;
;Output: HL, Z
;
;Returns the address in VRAM of the current cursor position, also returns the half of the byte in Z
;
;Fix: 231cc
_GetDisplayPosition:
	.echo "GetDisplayPosition	",_GetDisplayPosition;Address of the subroutine
	;Affected registers: af, bc
	push af							;Save registers on the stack so they are not affected in the parent subroutine
	push bc							;

	ld hl, _VRAM					;Initial vram position

	;Add x offset
	ld a, (_CursorX)				;Load x cursor value
	srl a							;Remove the byte half bit
	ld c, a							;Load a into bc
	ld b, 0							;
	add hl, bc						;Add the x value onto hl

	;Add y offset
	ld a, (_CursorY)				;Load y cursor value
	ld c, a
	xor a							;Set a to 0
	sla c
	sla c
	sla c							;Multiplied by 8

	sla c							;Multiply by 4
	sla c							;
	adc a, 0						;Carry if needed

	ld b, a							;Put the carry into b to form bc
	add hl, bc						;Add the y value onto hl
	
	pop bc							;Retrieve registers from the stack
	pop af							;

	;push hl							;Set the zero flag according to which half of the byte if positioned
	;ld hl, _CursorX					;
	;bit 0, (hl)						;TODO: maybe remove this (redundant)
	;pop hl							;

	ret



;Input: HL
;
;Output: None
;
;Puts the 4x4 sprite at HL in VRAM at _CursorX,_CursorY
;
;Max: 1255cc, Min: 1147cc
_DrawSprite:
	.echo "DrawSprite	",_DrawSprite;Address of the subroutine
	;Affected registers: af, bc, de, hl
	push af							;Save registers on the stack so they are not affected in the parent subroutine
	push bc							;
	push de							;
	push hl							;
	
	xor a							;Set a to 0
	ld (_DrawCount), a				;Set the draw counter to 0

	;Load sprite
	ld b, (hl)						;Load top half of sprite in b
	inc hl							;Go to the next half of the sprite
	ld c, (hl)						;Load bottom half of sprite in c

	call _GetDisplayPosition		;Get the display position in hl


_DrawSpriteByte:					;Don't call
	;Print half of byte
	ld a, b							;Load the current part of the sprite
	ld d, %11110000					;Mask for the first line of the sprite
	and d							;Mask the first line

	push hl
	ld hl, _CursorX
	bit 0, (hl)
	pop hl

	jr z, _DrawSpriteSkipShift		;Don't shift the byte if it's on the left half

	rrca \ rrca \ rrca \ rrca		;Shift a to the right half of the byte (rotate is faster)

_DrawSpriteSkipShift:				;Don't call

	ld e, (hl)						;Get the current byte from VRAM TODO: fix this
	or e							;Combine the current data with the new data
	ld (hl), a						;Put combined data into VRAM

	ld de, $0008					;Add 8 bytes to go to the next line
	add hl, de						;Go to the next line

	ld a, (_DrawCount)				;Check the draw counter for what to do next
	inc a
	ld (_DrawCount), a				;Store the draw counter

	cp 2							;Check if the next byte has been reached
	jr z, _DrawSpriteNextByte

	cp 4							;Check if the routine is over
	jr z, _DrawSpriteDone

	sla b							;Shift the second half of the byte into position
	sla b							;
	sla b							;
	sla b							;

	jr _DrawSpriteByte

_DrawSpriteNextByte:				;Don't call
	ld b, c							;Next byte is c
	jr _DrawSpriteByte

_DrawSpriteDone:					;Don't call
	pop hl							;Retrieve registers from the stack
	pop de							;
	pop bc							;
	pop af							;
	ret





;--------------------------------
;Display Operations
__DisplayOperations:
;--------------------------------

;Input: None
;
;Output: None
;
;Copy VRAM contents to the display
;
;
_WriteVRAM:
	.echo "WriteVRAM	",_WriteVRAM;Address of the subroutine
	;hl	= VRAM address counter
	;a	= Display data / command pins
	;b	= Page address counter
	;c	= Column address counter
	;d	= Display half + D/I command pins

	;Affected registers: hl, bc, de, af
	push af
	push bc
	push de
	push hl

	ld hl, _VRAM
	ld bc, $077f				;07 into b, 7f into c TODO: change 00 to 07 if fix doesnt work

_WriteVRAMLoop:
	ld d, 0						;Clear d

	;Display half selection
	bit 6, c					;Test for display half
	jr z, _WriteVRAMLeftHalf
	set 1, d
	;res 0, d					;Set CS2 for the right half of the display
	jr _WriteVRAMRightHalf		;TODO: test this hack if it works
	;.db %11001010				;TODO:jp z,xxxx	Because this condition will never be met it will skip over the next 2 bytes, containing the next instruction.
_WriteVRAMLeftHalf:
	set 0, d
	;res 1, d					;Set CS1 for the left half of the display
_WriteVRAMRightHalf:

	;Writing page address
	push bc						;
	ld a, $07					;Do b = 7 - b to flip the screen
	sub b						;
	ld b, a						;
	ld a, %10111000				;Command for setting the page address register
	or b						;Add page address to a
	pop bc						;
	call _WriteDisplay			;

	;Writing column address
	ld a, %01000000				;Command for setting the column address register
	or c						;Bit 6 doesn't need to be masked
	call _WriteDisplay

	;Copy data to display
	set 4, d					;Set D/I pin to data
	ld a, (hl)					;Copy display data to a
	call FlipA					;Mirror contents of a

	call _WriteDisplay

	;Move to next position
	inc hl
	dec b
	jp m, _WriteVRAMColumnDec	;If b is <0 go to the next line, jr can't check for S flag
	jr _WriteVRAMLoop

_WriteVRAMColumnDec:
	ld b, $07
	dec c
	jp p, _WriteVRAMLoop		;Loop if c is >=0, else end the subroutine. jr can't check for S flag

	pop hl
	pop de
	pop bc
	pop af
	ret


;Input: A, D
;
;Output: None
;
;Writes A and the commands specified in D to the display
;
;Fix: 74cc
_WriteDisplay:
	.echo "WriteDisplay	",_WriteDisplay;Address of the subroutine
	;a	= Display data / command pins
	;d	= Display half + D/I command pins

	out (_Display), a
	ld a, %00100100				;Reset, enable and write pins
	or d						;Combine with display half + D/I pins
	out (_DisplayCmd), a
	res 5, a					;Disable enable pin to trigger falling edge
	nop
	nop							;TODO:Check if the nops can be removed
	nop
	out (_DisplayCmd), a		;Write disabled enable pin

	ret



;Input: None
;
;Output: None
;
;Sets the correct pins for the display, resets cursor to 0,0
;
;Fix: 79cc
_DisplayInit:
	.echo "DisplayInit	",_DisplayInit;Address of the subroutine
	;a	= Pins for display control / resetting sprite cursor position
	push af

	;Set reset pin on the display module
	ld a, %00000100
	out (_DisplayCmd), a

	;Reset cursor to 0,0
	xor a							;More efficient than ld a, 0
	ld (_CursorX), a
	ld (_CursorY), a

	pop af
	ret



;Input: None
;
;Output: None
;
;Turn the display on
;
;Fix: 109cc
DisplayOn:	
	.echo "DisplayOn	",DisplayOn;Address of the subroutine
	;a	= Display command
	push af

	ld a, %00111111					;Display On command
	jr _DisplayOnOff



;Input: None
;
;Output: None
;
;Turn the display off
;
;Fix: 97cc
DisplayOff:
	.echo "DisplayOff	",DisplayOff;Address of the subroutine
	;a	= Display command
	push af

	ld a, %00111110					;Display Off command
	;jr _DisplayOnOff				;No need to jump to _DisplayOnOff since it is right under this subroutine

_DisplayOnOff:						;Don't call
	;a	= Display data / control pins
	
	;Output command
	out (_Display), a

	;Pulse enable pin to send command to display
	ld a, %00100111					;Control signals
	out (_DisplayCmd), a
	nop
	nop
	nop
	ld a, %00000111					;Reset control signals
	out (_DisplayCmd), a

	pop af
	ret



;--------------------------------
;Useful routines
__UsefulRoutines:
;--------------------------------

;Input: A
;
;Output: A
;
;Flips the contents of the A register
;
;Fix: 211cc
FlipA:
	.echo "FlipA	",FlipA;Address of the subroutine

	push	bc						;Preserve bc registers
	ld		c, a					;Load a into c
	xor		a						;Clear a
	ld		b, $07					;Start value for loop

_FlipALoop:							;Don't call
	rr		c						;Rotate c right
	rla								;Rotate the carry into a from the left

	djnz	_FlipALoop				;Loop until b=0
	pop		bc
	ret



;Input:		A
;
;Output:	F
;
;Puts the contents of A in F
;
;Fix: 60cc
SetFA:
	.echo "SetFA	",SetFA;Address of the subroutine
	push	bc				;Store BC

	ld		c, a			;Put AA in BC
	ld		b, a			;

	push	bc				;Put BC(AA) in AF
	pop		af				;

	pop		bc				;Restore BC
	ret



;Input: A, B
;
;Output: HL = A * B
;
;Multiplies A by B (Unsigned)
_MultAB:
	.echo "MultAB	",_MultAB
	;Registers affected: de, hl
	push de

	ld hl, 0						;Answer
	ld d, 0							;Addition
	ld e, a							;Store a in de

_MultABLoop:						;Don't call
	add hl, de						;Repeated addition
	djnz _MultABLoop				;Repeat B times

	pop de
	ret



;--------------------------------
;Extra data
__CodeSize:							;Used to indicate code size during assembly

#include "inc/fontSmall.inc"		;Character table (small font)
#include "inc/fontLarge.inc"		;Character table (large font)
;#include "inc/logo.inc"				;Z80 logo

.echo ""
.echo "Size of script in bytes:	",__CodeSize
__FileSize:							;Used to indicate total file size during assembly
.echo "Total file size in bytes:	",__FileSize

;--------------------------------