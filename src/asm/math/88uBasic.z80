;Basic 8-8-bit unsigned math functions
;Copyright (C) 2024 Tristan van de Weg
;
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License along
;    with this program; if not, write to the Free Software Foundation, Inc.,
;    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


;Input:		D,E
;
;Output:	DE = D*E
;
;Multiplies D by E (unsigned), the 16-bit result is returned in DE
;
;Max: 408cc, Min: 142cc TODO: fix timings
UMultDE:
	.echo "UMultDE ",UMultDE;Address of the subroutine
	;Affected registers: af, bc, hl

	push	af					;Store the affected registers
	push	bc					;
	push	hl					;

	ld		h, d				;Put D in HL
	ld		d, 0				;Put E in DE

	sla		h
	sbc		a, a
	and		e
	ld		l, a

	ld		b, 7				;Loop 7 times
_UMultDEloop:
	add		hl, hl				;Same as sla hl (there is no 16-bit shift)
	jr		nc, $+3
	add		hl, de

	djnz	_UMultDEloop		;Loop until B is 0

	ld		d, h				;Put the result in DE
	ld		e, l				;

	pop		hl					;Restore the affected registers
	pop		bc					;
	pop		af					;
	ret



;Input:		D,E
;
;Output:	DE = D/E
;
;Divides D by E (unsigned), the result is returned in D and the remainder in E
;
;Max: 414cc, Min: 95cc TODO:Fix timings
UDivDE:
	.echo "UDivDE ",UDivDE;Address of the subroutine
	;Affected registers: af, bc

	push	af					;Store the affected registers
	push	bc					;

	xor		a					;Set A to 0 (faster and smaller than ld a,0)

	ld		b, 8				;Loop 8 times
_UDivDEloop:
	sla		d					;Load the top bit of D
	rla							;Put the top bit of D in A

	cp		e					;Do A-E
	jr		c, $+4				;If A < E skip the next instructions
	sub		e					;Subtract E from A
	inc		d					;The result will be in D

	djnz	_UDivDEloop			;Loop until B is 0

	ld		e, a				;Place the remainder in E

	pop		bc					;Restore the affected registers
	pop		af					;
	ret
