#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Tue Oct  3 18:51:51 2023
#

import wx

# begin wxGlade: dependencies
import wx.adv
# end wxGlade

# begin wxGlade: extracode
#Copyright (C) 2022  Tristan van de Weg
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# end wxGlade


class SerialSelect(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: SerialSelect.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.SetSize((325, 131))
		self.SetTitle("frame")

		self.panel_1 = wx.Panel(self, wx.ID_ANY)

		sizer_1 = wx.BoxSizer(wx.VERTICAL)

		self.SerialPort = wx.TextCtrl(self.panel_1, wx.ID_ANY, "/dev/ttyUSB0")
		self.SerialPort.SetMinSize((300, 32))
		self.SerialPort.SetToolTip("Serial Port of the programmer")
		sizer_1.Add(self.SerialPort, 0, wx.EXPAND, 0)

		sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

		self.SerialBaudRate = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=["115200", "19200", "9600"], style=wx.CB_DROPDOWN)
		self.SerialBaudRate.SetToolTip("Baudrate")
		self.SerialBaudRate.SetSelection(0)
		sizer_2.Add(self.SerialBaudRate, 0, wx.EXPAND, 0)

		self.checkbox = wx.CheckBox(self.panel_1, wx.ID_ANY, "Save Settings?", style=wx.CHK_2STATE)
		self.checkbox.SetValue(1)
		sizer_2.Add(self.checkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		self.SerialConnect = wx.Button(self.panel_1, wx.ID_ANY, "Connect to serial port")
		sizer_1.Add(self.SerialConnect, 0, wx.EXPAND, 0)

		self.panel_1.SetSizer(sizer_1)

		self.Layout()

		self.Bind(wx.EVT_BUTTON, self.OnSerialConnect, self.SerialConnect)
		# end wxGlade

	def OnSerialConnect(self, event):  # wxGlade: SerialSelect.<event_handler>
		print("Event handler 'OnSerialConnect' not implemented!")
		event.Skip()

# end of class SerialSelect

class Main(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: Main.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.SetSize((400, 250))
		self.SetTitle("z80 Programmer")

		self.panel_1 = wx.Panel(self, wx.ID_ANY)

		sizer_1 = wx.BoxSizer(wx.VERTICAL)

		sizerFileSelect = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, "File Selection"), wx.HORIZONTAL)
		sizer_1.Add(sizerFileSelect, 1, wx.EXPAND, 0)

		self.FileSelect = wx.Button(self.panel_1, wx.ID_ANY, "Select File")
		sizerFileSelect.Add(self.FileSelect, 0, wx.ALIGN_CENTER_VERTICAL, 0)

		self.SelectedFile = wx.StaticText(self.panel_1, wx.ID_ANY, "Selected File")
		sizerFileSelect.Add(self.SelectedFile, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 7)

		ProgrammingControls = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, "Programming"), wx.HORIZONTAL)
		sizer_1.Add(ProgrammingControls, 1, wx.EXPAND, 0)

		self.Write = wx.Button(self.panel_1, wx.ID_ANY, "Write")
		self.Write.Enable(False)
		ProgrammingControls.Add(self.Write, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)

		self.Read = wx.Button(self.panel_1, wx.ID_ANY, "Read")
		self.Read.Enable(False)
		ProgrammingControls.Add(self.Read, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)

		sizer_2 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, "Serial Port Settings"), wx.HORIZONTAL)
		sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

		CurSerialSettings = wx.BoxSizer(wx.VERTICAL)
		sizer_2.Add(CurSerialSettings, 2, wx.ALIGN_CENTER_VERTICAL, 0)

		self.CurSerialPort = wx.StaticText(self.panel_1, wx.ID_ANY, "Serial Port")
		CurSerialSettings.Add(self.CurSerialPort, 0, wx.EXPAND, 0)

		self.CurSerialBaud = wx.StaticText(self.panel_1, wx.ID_ANY, "Baudrate")
		CurSerialSettings.Add(self.CurSerialBaud, 0, wx.EXPAND, 0)

		self.SetSerialSettings = wx.Button(self.panel_1, wx.ID_ANY, "Settings")
		sizer_2.Add(self.SetSerialSettings, 1, wx.ALIGN_CENTER_VERTICAL, 0)

		self.panel_1.SetSizer(sizer_1)

		self.Layout()

		self.Bind(wx.EVT_BUTTON, self.OnFileSelect, self.FileSelect)
		self.Bind(wx.EVT_BUTTON, self.OnWrite, self.Write)
		self.Bind(wx.EVT_BUTTON, self.OnRead, self.Read)
		self.Bind(wx.EVT_BUTTON, self.OnSerialPortSettings, self.SetSerialSettings)
		# end wxGlade

	def OnFileSelect(self, event):  # wxGlade: Main.<event_handler>
		print("Event handler 'OnFileSelect' not implemented!")
		event.Skip()

	def OnWrite(self, event):  # wxGlade: Main.<event_handler>
		print("Event handler 'OnWrite' not implemented!")
		event.Skip()

	def OnRead(self, event):  # wxGlade: Main.<event_handler>
		print("Event handler 'OnRead' not implemented!")
		event.Skip()

	def OnSerialPortSettings(self, event):  # wxGlade: Main.<event_handler>
		print("Event handler 'OnSerialPortSettings' not implemented!")
		event.Skip()

# end of class Main

class Licence(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: Licence.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetTitle("dialog")

		sizer_1 = wx.BoxSizer(wx.VERTICAL)

		text = wx.StaticText(self, wx.ID_ANY, "Programmer Interface version 0, \nCopyright (C) 2023 Tristan van de Weg and Marijn Vollenberg, \nProgrammer Interface comes with ABSOLUTELY NO WARRANTY;")
		sizer_1.Add(text, 0, 0, 0)

		self.WarrantyLink = wx.adv.HyperlinkCtrl(self, wx.ID_ANY, "For details click here", "https://github.com/tristanvandeweg/z80/blob/master/LICENSE#L258", style=wx.adv.HL_DEFAULT_STYLE)
		sizer_1.Add(self.WarrantyLink, 0, 0, 0)

		sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)

		text2_copy = wx.StaticText(self, wx.ID_ANY, "This is free software, and you are welcome to redistribute it ")
		sizer_3.Add(text2_copy, 0, 0, 0)

		self.DistrLink = wx.adv.HyperlinkCtrl(self, wx.ID_ANY, "under certain conditions;", "https://github.com/tristanvandeweg/z80/blob/master/LICENSE#L59", style=wx.adv.HL_DEFAULT_STYLE)
		sizer_3.Add(self.DistrLink, 0, 0, 0)

		sizer_2 = wx.StdDialogButtonSizer()
		sizer_1.Add(sizer_2, 0, wx.ALL | wx.EXPAND, 4)

		self.licence_YES = wx.Button(self, wx.ID_OK, "")
		self.licence_YES.SetDefault()
		sizer_2.AddButton(self.licence_YES)

		self.licence_NO = wx.Button(self, wx.ID_EXIT, "")
		sizer_2.Add(self.licence_NO, 0, 0, 0)

		self.NoLicence = wx.CheckBox(self, wx.ID_ANY, "Do not show this message again")
		sizer_2.Add(self.NoLicence, 0, wx.EXPAND, 0)

		sizer_2.Realize()

		self.SetSizer(sizer_1)
		sizer_1.Fit(self)

		self.SetAffirmativeId(self.licence_YES.GetId())

		self.Layout()

		self.Bind(wx.EVT_BUTTON, self.OnLicenceAgree, self.licence_YES)
		self.Bind(wx.EVT_BUTTON, self.OnLicenceDisagree, self.licence_NO)
		self.Bind(wx.EVT_CLOSE, self.OnLicenceDisagree, self)
		# end wxGlade

	def OnLicenceAgree(self, event):  # wxGlade: Licence.<event_handler>
		print("Event handler 'OnLicenceAgree' not implemented!")
		event.Skip()

	def OnLicenceDisagree(self, event):  # wxGlade: Licence.<event_handler>
		print("Event handler 'OnLicenceDisagree' not implemented!")
		event.Skip()

# end of class Licence

class ProgInterface(wx.App):
	def OnInit(self):
		self.Licence = Licence(None, wx.ID_ANY, "")
		self.SetTopWindow(self.Licence)
		self.Licence.ShowModal()
		self.Licence.Destroy()
		return True

# end of class ProgInterface

if __name__ == "__main__":
	ProgrammerInterface = ProgInterface(0)
	ProgrammerInterface.MainLoop()
